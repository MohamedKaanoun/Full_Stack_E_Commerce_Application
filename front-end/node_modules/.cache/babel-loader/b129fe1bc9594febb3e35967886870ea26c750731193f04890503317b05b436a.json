{"ast":null,"code":"import { API_BASE_URL, api } from \"../../config/ApiConfig\";\nimport { GET_CART_FAILURE, GET_CART_SUCCESS } from \"../Cart/ActioType\";\nimport { CREATE_ORDER_FAILURE, CREATE_ORDER_REQUEST, CREATE_ORDER_SUCCESS, GET_ORDER_BY_ID_FAILURE, GET_ORDER_BY_ID_REQUEST, GET_ORDER_BY_ID_SUCCESS, GET_ORDER_HISTORY_FAILURE, GET_ORDER_HISTORY_REQUEST, GET_ORDER_HISTORY_SUCCESS } from \"./ActionType\";\nexport const createOrder = reqData => async dispatch => {\n  try {\n    dispatch({\n      type: CREATE_ORDER_REQUEST\n    });\n    const {\n      data\n    } = await api.post(`/orders/`, reqData.address);\n    if (data.id) {\n      reqData.navigate({\n        search: `step=3&order_id=${data.id}`\n      });\n    }\n    dispatch({\n      type: CREATE_ORDER_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: CREATE_ORDER_FAILURE,\n      payload: error.message\n    });\n  }\n};\nexport const getOrderById = orderId => async dispatch => {\n  try {\n    dispatch({\n      type: GET_ORDER_BY_ID_REQUEST\n    });\n    const {\n      data\n    } = await api.get(`/orders/${orderId}`);\n    dispatch({\n      type: GET_ORDER_BY_ID_SUCCESS,\n      payload: data\n    });\n    console.log(\"data\", data);\n  } catch (error) {\n    dispatch({\n      type: GET_ORDER_BY_ID_FAILURE,\n      payload: error.message\n    });\n  }\n};\nexport const getOrdersHistory = jwt => async dispatch => {\n  try {\n    dispatch({\n      type: GET_ORDER_HISTORY_REQUEST\n    });\n    const {\n      data\n    } = await api.get(`/orders/user`, {\n      headers: {\n        Authorization: `Bearer ${jwt}`\n      }\n    });\n    dispatch({\n      type: GET_ORDER_HISTORY_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: GET_ORDER_HISTORY_FAILURE,\n      payload: error.message\n    });\n  }\n};","map":{"version":3,"names":["API_BASE_URL","api","GET_CART_FAILURE","GET_CART_SUCCESS","CREATE_ORDER_FAILURE","CREATE_ORDER_REQUEST","CREATE_ORDER_SUCCESS","GET_ORDER_BY_ID_FAILURE","GET_ORDER_BY_ID_REQUEST","GET_ORDER_BY_ID_SUCCESS","GET_ORDER_HISTORY_FAILURE","GET_ORDER_HISTORY_REQUEST","GET_ORDER_HISTORY_SUCCESS","createOrder","reqData","dispatch","type","data","post","address","id","navigate","search","payload","error","message","getOrderById","orderId","get","console","log","getOrdersHistory","jwt","headers","Authorization"],"sources":["C:/Users/Mohamed Kaanoun/Documents/WEB/E-commerce/front-end/src/State/Order/Action.js"],"sourcesContent":["import { API_BASE_URL, api } from \"../../config/ApiConfig\";\r\nimport { GET_CART_FAILURE, GET_CART_SUCCESS } from \"../Cart/ActioType\";\r\nimport {\r\n  CREATE_ORDER_FAILURE,\r\n  CREATE_ORDER_REQUEST,\r\n  CREATE_ORDER_SUCCESS,\r\n  GET_ORDER_BY_ID_FAILURE,\r\n  GET_ORDER_BY_ID_REQUEST,\r\n  GET_ORDER_BY_ID_SUCCESS,\r\n  GET_ORDER_HISTORY_FAILURE,\r\n  GET_ORDER_HISTORY_REQUEST,\r\n  GET_ORDER_HISTORY_SUCCESS,\r\n} from \"./ActionType\";\r\n\r\nexport const createOrder = (reqData) => async (dispatch) => {\r\n  try {\r\n    dispatch({ type: CREATE_ORDER_REQUEST });\r\n    const { data } = await api.post(`/orders/`, reqData.address);\r\n    if (data.id) {\r\n      reqData.navigate({ search: `step=3&order_id=${data.id}` });\r\n    }\r\n    dispatch({\r\n      type: CREATE_ORDER_SUCCESS,\r\n      payload: data,\r\n    });\r\n  } catch (error) {\r\n    dispatch({\r\n      type: CREATE_ORDER_FAILURE,\r\n      payload: error.message,\r\n    });\r\n  }\r\n};\r\n\r\nexport const getOrderById = (orderId) => async (dispatch) => {\r\n  try {\r\n    dispatch({ type: GET_ORDER_BY_ID_REQUEST });\r\n    const { data } = await api.get(`/orders/${orderId}`);\r\n    dispatch({\r\n      type: GET_ORDER_BY_ID_SUCCESS,\r\n      payload: data,\r\n    });\r\n    console.log(\"data\" , data)\r\n  } catch (error) {\r\n    dispatch({\r\n      type: GET_ORDER_BY_ID_FAILURE,\r\n      payload: error.message,\r\n    });\r\n  }\r\n};\r\n\r\nexport const getOrdersHistory = (jwt) => async (dispatch) => {\r\n  try {\r\n    dispatch({ type: GET_ORDER_HISTORY_REQUEST });\r\n    const { data } = await api.get(`/orders/user`, {\r\n      headers: {\r\n        Authorization: `Bearer ${jwt}`,\r\n      },\r\n    });\r\n    dispatch({\r\n      type: GET_ORDER_HISTORY_SUCCESS,\r\n      payload: data,\r\n    });\r\n  } catch (error) {\r\n    dispatch({\r\n      type: GET_ORDER_HISTORY_FAILURE,\r\n      payload: error.message,\r\n    });\r\n  }\r\n};\r\n"],"mappings":"AAAA,SAASA,YAAY,EAAEC,GAAG,QAAQ,wBAAwB;AAC1D,SAASC,gBAAgB,EAAEC,gBAAgB,QAAQ,mBAAmB;AACtE,SACEC,oBAAoB,EACpBC,oBAAoB,EACpBC,oBAAoB,EACpBC,uBAAuB,EACvBC,uBAAuB,EACvBC,uBAAuB,EACvBC,yBAAyB,EACzBC,yBAAyB,EACzBC,yBAAyB,QACpB,cAAc;AAErB,OAAO,MAAMC,WAAW,GAAIC,OAAO,IAAK,MAAOC,QAAQ,IAAK;EAC1D,IAAI;IACFA,QAAQ,CAAC;MAAEC,IAAI,EAAEX;IAAqB,CAAC,CAAC;IACxC,MAAM;MAAEY;IAAK,CAAC,GAAG,MAAMhB,GAAG,CAACiB,IAAI,CAAC,UAAU,EAAEJ,OAAO,CAACK,OAAO,CAAC;IAC5D,IAAIF,IAAI,CAACG,EAAE,EAAE;MACXN,OAAO,CAACO,QAAQ,CAAC;QAAEC,MAAM,EAAE,mBAAmBL,IAAI,CAACG,EAAE;MAAG,CAAC,CAAC;IAC5D;IACAL,QAAQ,CAAC;MACPC,IAAI,EAAEV,oBAAoB;MAC1BiB,OAAO,EAAEN;IACX,CAAC,CAAC;EACJ,CAAC,CAAC,OAAOO,KAAK,EAAE;IACdT,QAAQ,CAAC;MACPC,IAAI,EAAEZ,oBAAoB;MAC1BmB,OAAO,EAAEC,KAAK,CAACC;IACjB,CAAC,CAAC;EACJ;AACF,CAAC;AAED,OAAO,MAAMC,YAAY,GAAIC,OAAO,IAAK,MAAOZ,QAAQ,IAAK;EAC3D,IAAI;IACFA,QAAQ,CAAC;MAAEC,IAAI,EAAER;IAAwB,CAAC,CAAC;IAC3C,MAAM;MAAES;IAAK,CAAC,GAAG,MAAMhB,GAAG,CAAC2B,GAAG,CAAC,WAAWD,OAAO,EAAE,CAAC;IACpDZ,QAAQ,CAAC;MACPC,IAAI,EAAEP,uBAAuB;MAC7Bc,OAAO,EAAEN;IACX,CAAC,CAAC;IACFY,OAAO,CAACC,GAAG,CAAC,MAAM,EAAGb,IAAI,CAAC;EAC5B,CAAC,CAAC,OAAOO,KAAK,EAAE;IACdT,QAAQ,CAAC;MACPC,IAAI,EAAET,uBAAuB;MAC7BgB,OAAO,EAAEC,KAAK,CAACC;IACjB,CAAC,CAAC;EACJ;AACF,CAAC;AAED,OAAO,MAAMM,gBAAgB,GAAIC,GAAG,IAAK,MAAOjB,QAAQ,IAAK;EAC3D,IAAI;IACFA,QAAQ,CAAC;MAAEC,IAAI,EAAEL;IAA0B,CAAC,CAAC;IAC7C,MAAM;MAAEM;IAAK,CAAC,GAAG,MAAMhB,GAAG,CAAC2B,GAAG,CAAC,cAAc,EAAE;MAC7CK,OAAO,EAAE;QACPC,aAAa,EAAE,UAAUF,GAAG;MAC9B;IACF,CAAC,CAAC;IACFjB,QAAQ,CAAC;MACPC,IAAI,EAAEJ,yBAAyB;MAC/BW,OAAO,EAAEN;IACX,CAAC,CAAC;EACJ,CAAC,CAAC,OAAOO,KAAK,EAAE;IACdT,QAAQ,CAAC;MACPC,IAAI,EAAEN,yBAAyB;MAC/Ba,OAAO,EAAEC,KAAK,CAACC;IACjB,CAAC,CAAC;EACJ;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}